package vn.edu.iuh.fit.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import vn.edu.iuh.fit.model.Book;import vn.edu.iuh.fit.repositories.BookRepository;import vn.edu.iuh.fit.service.BookService;import java.util.List;@RestController@RequestMapping("api/book")public class BookController {    @Autowired    private BookRepository bookRepository;    @Autowired    private BookService bookService;    @PostMapping    public void save(@RequestBody Book book) {        System.out.println(book);        bookService.createBook(book);    }    @GetMapping()    @Cacheable(value = "books")    public List<Book> getAllBooks() {        return bookRepository.findAll();    }    @GetMapping("/{id}")    @Cacheable(value = "book", key = "#id")    public Book getBookById(@PathVariable("id") long id) {        Book book = bookRepository.findById((int) id).orElse(null);        if (book == null) {            System.out.println("Book not found with ID: " + id);        }        return book;    }    @PutMapping("/{id}")    @CacheEvict(value = "book", key = "#id")    public ResponseEntity<Book> updateBook(@PathVariable int id, @RequestBody Book updatedBook) {        Book book = bookService.updateBook(id, updatedBook);        if (book != null) {            return ResponseEntity.ok(book);        } else {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    @CacheEvict(value = "book", key = "#id")    public ResponseEntity<String> deleteBookById(@PathVariable int id) {        try {            bookRepository.deleteById(id);            return ResponseEntity.ok("Book removed successfully!");        } catch (EmptyResultDataAccessException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/hello")    public String hello() {        return "Hello";    }}